##################################################
# Real Time Linux Configs
##################################################

CONFIG_PREEMPT=y
CONFIG_PREEMPT_RT=y

# max out the kernel's tick
#
# Ideally this is a balance. Increasing this means we
# spend more time in the scheduler deciding what we
# should do and less time on doing it however this
# also minimizes the time spent running a low-priority
# task while a real-time priority task is awake
CONFIG_HZ_1000=y
CONFIG_HZ=1000

# omit scheduling ticks for CPUs with a single task
#
# If a CPU has only one runnable task there is little
# need to contiguously interrupt it as there is no other
# task for it to switch to. This comes at the cost of having
# to offload the CPU's RCU callbacks to another CPU with
# an active tick.
#
# For workloads with many short-lived tasks HZ_PERIODIC may
# be the better selection as adaptive-tick modes does not
# come without tradeoffs. For example the user-to kernel
# transitions are slightly more expensive
CONFIG_NO_HZ_FULL=y
CONFIG_CONTEXT_TRACKING_USER=y

# track our RCU callbacks
#
# there are situations in which idle CPUs cannot enter
# a dynctick or adaptive-tick mode, the most common reason
# being when a CPU has RCU callbacks pending. We can avoid
# this by processing all RCU callbacks in the "rcuo" kthread
# that we can 'boost' to real-time priority to prevent RCU
# stalls in real-time heavy workloads.
CONFIG_RCU_NOCB_CPU=y
CONFIG_RCU_NOCB_CPU_DEFAULT_ALL=y
CONFIG_RCU_NOCB_CPU_CB_BOOST=y

# memory management tuning
#
# The SLUB allocator (default allocator used by the kernel)
# uses per-cpu caches to accelerate allocation and freeing of
# objects local to that processor. This comes at the cost of
# more indeterminism when freeing. Remove this to remove jitter
CONFIG_SLUB_CPU_PARTIAL=n

# RCU system tuning
#
# The scheduler heavily utilizes the RCU subsystem to avoid
# large amounts of locking that would be needed otherwise.
# Removing this is showing to improve the am62x latency numbers
# using stress-ng and cyclictest.
CONFIG_RCU_TRACE=n

# remove have kmemleak support
#
# Even-though the kmemleak detector is disabled, removing it
# completely from the build is showing improvements for the
# am62x latency numbers when monitoring with cyclictest and
# stress-ng to generate a synthetic background load.
CONFIG_HAVE_DEBUG_KMEMLEAK=n

# HACK: speed up event stream timer
#
# More of a TODO for myself... however something is putting
# the CPUs in WFE. Turning this off will increase the
# frequency this timer that takes the CPUs our of WFE.
#
# Ideally this should have a negative effect on our measurements
# as our CPUs are interrupted more often.
CONFIG_ARM_ARCH_TIMER_EVTSTREAM=n

# Disable ARMv8.1+ errata workarounds. TI processors are based
# on ARMv8.0, and these workarounds are not applicable. If enabled
# they increase worst case latency from 41 usec to 83 usec when
# tested on AM62x silicon with 1 hour cyclictest.
CONFIG_ARM64_HW_AFDBM=n
CONFIG_ARM64_PAN=n
CONFIG_ARM64_USE_LSE_ATOMICS=n
CONFIG_ARM64_RAS_EXTN=n
CONFIG_ARM64_CNP=n
CONFIG_ARM64_PTR_AUTH=n
CONFIG_ARM64_AMU_EXTN=n
CONFIG_ARM64_TLB_RANGE=n
CONFIG_ARM64_BTI=n
CONFIG_ARM64_E0PD=n

# Disable group scheduling. We already disable RT_GROUP_SCHEDULING since
# there is no way to meaningfully use it (see kernel/configs/ti_arm64_prune.config).
# Disable group scheduling as such on RT kernel - the main focus anyway
# is on RT tasks there.
CONFIG_SCHED_AUTOGROUP=n

# Kernel stack base address randomization helps frustate attacks that depend on
# stack address determinism. But it has an impact on RT latency. Using 1 hour
# cyclictest on AM62x, it was found to increase worst case latency from 50 usecs
# to 69 usecs. For RT kernel alone, be biased towards better latency over extra
# security.
CONFIG_RANDOMIZE_KSTACK_OFFSET=n

# Kernel can apply read-only permissions to linear aliases of VM areas. This
# provides extra layer of protection against advertent/inadvertent modification
# of read-only data through the linear alias. While its a useful security
# feature, it has performance and RT latency impact. When testing on AM62x
# hardware using cyclictest running for 1 hour, the worst case latency increased
# from 50 usecs to 58 usecs when this feature was enabled.
CONFIG_RODATA_FULL_DEFAULT_ENABLED=n

#Disable PM features
CONFIG_CPU_IDLE=n
CONFIG_CPU_FREQ=n
CONFIG_SUSPEND=n
